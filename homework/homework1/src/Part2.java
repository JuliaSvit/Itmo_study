public class Part2 {

    /*1) Создайте программу, выводящую на экран
    все четырёхзначные числа последовательности 1000 1003 1006 1009 1012 1015 ….*/

    void numbers_1(){
        System.out.println("1. Числовая последовательность четырёхзначных чисел:");
        for (int i = 1000; i < 10000; i+=3){
            System.out.print(i + " ");
        }

        System.out.print("\n");
    }

    /*2) Создайте программу, выводящую на экран все неотрицательные элементы
    последовательности 90 85 80 75 70 65 60 ….*/

    void numbers_2(){
        System.out.println("2. Числовая последовательность неотрицательных чисел:");
        for (int i = 90; i >= 0; i-=5){
            System.out.print(i + " ");
        }

        System.out.print("\n");
    }

    /*3) Создайте программу, выводящую на экран первые 20 элементов
    последовательности 2 4 8 16 32 64 128 ….*/

    void numbers_3(){
        System.out.println("3. Первые 20 элементов числовой последовательности:");
        for (int i = 1; i <= 20; i++){
            System.out.print((int)Math.pow(2, i) + " ");
        }

        System.out.print("\n");
    }

    /*4) Проверьте,  является ли  натуральное число — простым. */

    void prime_4(){
        System.out.println("4. Является ли натуральное число - простым:");
        int x = 13;
        boolean k = true;
        for (int i = 2; i < x; i++){
            if (x%i == 0){
                k = false;
                break;
            }
        }
        if (k) {
            System.out.println("Число " + x + " простое");
        } else {
            System.out.println("Число " + x + " не простое");
        }


    }

    /*5) Выведите на экран первые 11 членов последовательности Фибоначчи.
    Первый и второй члены последовательности равны единицам,
    а каждый следующий — сумме двух предыдущих.*/

    void fibonacci_5(){
        System.out.println("5. 11 членов последовательности Фибоначчи:");
        int a, b, c;
        a = b = 1;
        System.out.print(a + " " + b + " ");
        for (int i = 0; i < 9; i++){
            c = a + b;
            a = b;
            b = c;
            System.out.print(c + " ");
        }
        System.out.print("\n");
    }

    /*6) В городе N проезд в трамвае осуществляется по бумажным отрывным билетам.
    Каждую неделю трамвайное депо заказывает в местной типографии рулон билетов с номерами от 000001 до 999999.
    «Счастливым» считается билетик у которого сумма первых трёх цифр номера равна сумме последних трёх цифр,
    как, например, в билетах с номерами 003102 или 567576. Трамвайное депо решило подарить сувенир обладателю
    каждого счастливого билета и теперь раздумывает, как много сувениров потребуется.
    С помощью программы подсчитайте сколько счастливых билетов в одном рулоне?*/

    void lukyTicket_6(){
        System.out.println("6. Количество счастливых билетов в рулоне:");
        int n1, n2, k;
        k = 0;
        for (int i = 1; i < 1000000; i++){
            n1 = i/1000;
            n2 = i%1000;
            n1 = n1/100 + n1%100/10 + n1%100%10;
            n2 = n2/100 + n2%100/10 + n2%100%10;
            if(n1 == n2){
                k++;
            }
        }
        System.out.println(k + " счастливых билетов в одном рулоне");
    }

    /*7) Электронные часы показывают время в формате от 00:00 до 23:59.
    Подсчитать сколько раз за сутки случается так, что слева от двоеточия показывается симметричная
    комбинация для той, что справа от двоеточия (например, 02:20, 11:11 или 15:51).*/

    void watch_7(){
        System.out.println("7. Сколько раз в сутки в электронных часах время зеркальное:");
        int h = 24;
        int m = 60;
        int m0, k = 0;
        for (int i = 0; i < h; i++){
            for (int j = 0; j < m; j++){
                m0 = j%10*10 + j/10;
                if (i == m0){
                    k++;
                    break;
                }
            }
        }

        System.out.println(k + " раз за сутки");

    }

}
